<?xml version="1.0" encoding="UTF-8"?>
<chapter id="config">
  <title>Configuration</title>
   <para>
     nxlog uses 
     <ulink url="http://httpd.apache.org/docs/2.0/configuring.html#syntax">Apache-style</ulink>
     configuration files. The configuration file is loaded from its default location or it can
     be explicitly specified with the <option>-c</option> command line argument.
   </para>
   <para>
     The config file is made up of blocks and directives. Blocks are similar to xml tags
     containing multiple directives.
     Directive names are case insensitive but arguments are not always. A directive and its
     argument must be specified on the same line. Values spanning multiple lines must have
     the newline escaped with the backslash "\".
     A typical case for this is the <link linkend="config_module_exec">Exec</link> directive.
     Blank lines are ignored.
   </para>
   <para>
     Lines starting with the hashmark "#" are comments and are ignored.
   </para>
   <para>
     The configuration file can be logically divided into three parts:
     <link linkend="config_global">global parameters</link>,
     <link linkend="config_modules">module definitions and their configuration</link> and
     <link linkend="config_routes">routes</link> which link the modules together according
     to the data flow required.
   </para>

   <section id="config_include">
     <title>File inclusion</title>
     <para>
       Using the 'include' directive it is possible to specify a file which will be
       included in the current config file. Special care must be taken when specifing 
       files with relative filenames. The <link linkend="config_global_spooldir">SpoolDir</link>
       directive will only take effect after the configuration was parsed, so relative paths
       specified with the 'include' directive are relative to the working directory where nxlog was
       started from.
     </para>
     <para>
       The include directive also supports wildcarded file names (e.g. <filename>*.conf</filename>)
       so that it is possible to include a set of files within a directory without the need
       to explicitly list all.
     </para>
     <para>
       <example>
	 <title>File inclusion example</title>
	 <programlisting>include modules/module1.conf</programlisting>
       </example>
       <example>
	 <title>Config file inclusion with wildcards</title>
	 <programlisting>include /etc/nxlog.d/*.conf</programlisting>
       </example>
     </para>
   </section>

   <section id="config_define">
     <title>Constant and macro definitions</title>
     <para>
       Defines are useful if there are many instances in the code where the same value must be used,
       directory or host names are typical cases. In such cases the value can be configured with a
       single definition.
       This can be used to not only define constants but any string like code snippets or parser rules.
     </para>
     <para>
       An nxlog define works similarly as in C where the preprocessor substitutes the value in places
       where the macro is used, i.e. the nxlog configuration parser will first replace all occurences
       of the defined name with its value, only after this substitution will the configuration check
       occur.
     </para>

     <para>
       <example>
	 <title>Example for using defines</title>
	 <programlisting><![CDATA[
define BASEDIR /var/log
define IGNORE_DEBUG if $raw_event =~ /debug/ drop();

<Input messages>
    Module      im_file
    File        '%BASEDIR%/messages'
</Input>

<Input proftpd>
    Module      im_file
    File        '%BASEDIR%/proftpd.log'
    Exec        %IGNORE_DEBUG%
</Input>]]></programlisting>
       </example>

       The following example shows an incorrect use if the define directive. After substitution
       the <function>drop()</function> procedure will be always executed, only the warning
       message is emitted conditionally.
       <example>
	 <title>Incorrect use of a define</title>
	 <programlisting><![CDATA[
define ACTION log_warning("dropping message"); drop();

<Input messages>
    Module      im_file
    File        '/var/log/messages'
    Exec        if $raw_event =~ /dropme/ %ACTION%
</Input>]]></programlisting>
       </example>
       To avoid this problem, the defined action should be one code block, i.e. it should be enclosed
       within curly braces:
       <programlisting><![CDATA[define ACTION { log_warning("dropping message"); drop(); }]]></programlisting>
     </para>
   </section>

   <section id="config_global">
     <title>Global directives</title>
     <para>
       <variablelist>
	 <varlistentry>
	   <term><anchor id="config_global_moduledir"/>ModuleDir</term>
	   <listitem>
	     <simpara>
	       By default the nxlog binaries have a compiled-in value for the directory to
	       search for loadable modules. This can be overrridden with this directive.
	       The module directory contains subdirectories for each module type (extension,
	       input, output, processor) and the module binaries are located in those.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_pidfile"/>PidFile</term>
	   <listitem>
	     <simpara>
	       Under Unix operating systems nxlog writes a pid file as other system daemons do.
	       The default value can be overridden with this directive in case multiple
	       daemon instances need to be running.
	       This directive has no effect on MS Windows or with the 
	       <link linkend="nxlog_processor">nxlog-processor</link>.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_logfile"/>LogFile</term>
	   <listitem>
	     <simpara>
	       nxlog will write its internal log to this file. If this directive is not
	       specified, self logging is disabled. Not that the
	       <link linkend="im_internal">im_internal</link> module can be also
	       used to direct internal log messages to files or different output destinations,
	       but this does not support loglevel below 'info'.
	       This LogFile directive is especially usefull for debugging.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_loglevel"/>LogLevel</term>
	   <listitem>
	     <simpara>
	       This directive has five possible values: CRITICAL, ERROR, WARNING, INFO, DEBUG
	       It will set the logging level used for LogFile and the standard output if
	       nxlog is started in the forground.
	       By default the LogLevel is INFO.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_suppressrepeatinglogs"/>SuppressRepeatingLogs</term>
	   <listitem>
	     <simpara>
	       Under some circumstances it is possible for nxlog to generate an extreme amount
	       of internal logs consisting of the same message due to a misconfiguration or
	       software bug. This can lead to an extreme usage of disk space by
	       <link linkend="config_global_logfile">LogFile</link> and nxlog can quickly fill
	       up the disk. With this directive nxlog will write at most 2 lines per second
	       if the same message is generated successively by emitting
	       <quote>last message repeated x times</quote> will suppress these messages.
	       This directive takes a boolean value (TRUE or FALSE).
	       If this directive is not specified in the config file, it defaults to TRUE, i.e.
	       repeating message suppression is enabled.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_nocache"/>NoCache</term>
	   <listitem>
	     <simpara>
	       Some modules save data to a cache file which is persisted across a
	       shutdown/restart. Modules such as <link linkend="im_file">im_file</link>
	       will save the file position in order to be able to continue reading from
	       the same position where it left off after a restart.
	       This caching mechanism can be explicitely turned off with this directive,
	       this is mostly useful with the <link linkend="nxlog_processor">nxlog-processor</link>
	       in offline mode.
	       This directive takes a boolean value (TRUE or FALSE).
	       If this directive is not specified in the config file, it defaults to FALSE, i.e.
	       caching is enabled.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_cachedir"/>CacheDir</term>
	   <listitem>
	     <simpara>
	       This directive specifies a directory where the cache file called
	       <filename>configcache.dat</filename> should be written to.
	       This directive has a compiled-in value which is used by default.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_user"/>User</term>
	   <listitem>
	     <simpara>
	       nxlog will drop to user specified with this directive. This is useful if
	       nxlog needs privileged access to some system resources such as kernel
	       messages or port bind below 1024.
	       On Linux systems it will use capabilites to be able to access these resources.
	       In this case nxlog must be started as root.
	       The user can be specified by name or by numeric id.
	       This directive has no effect on MS Windows or with the 
	       <link linkend="nxlog_processor">nxlog-processor</link>.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_group"/>Group</term>
	   <listitem>
	     <simpara>
	       Similar to <link linkend="config_global_user">User</link>, nxlog will set the group ID
	       to be running under.
	       The group can be specified by name or by numeric id.
	       This directive has no effect on MS Windows or with the 
	       <link linkend="nxlog_processor">nxlog-processor</link>.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_rootdir"/>RootDir</term>
	   <listitem>
	     <simpara>
	       nxlog will set its root directory to the value specified with this
	       directive. If <link linkend="config_global_spooldir">SpoolDir</link> is also set,
	       this will be relative to the value of RootDir, i.e.
	       chroot() is called first.
	       This directive has no effect on MS Windows or with the 
	       <link linkend="nxlog_processor">nxlog-processor</link>.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_spooldir"/>SpoolDir</term>
	   <listitem>
	     <simpara>
	       nxlog will change its working directory to the value specified with this 
	       directive.
	       This is useful with files created through relative filenames, e.g. with
	       <link linkend="om_file">om_file</link> and in case of core dumps.
	       This directive has no effect with the 
	       <link linkend="nxlog_processor">nxlog-processor</link>.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_threads"/>Threads</term>
	   <listitem>
	     <simpara>
	       This optional directive specifies the number of worker threads to use.
	       The number of the worker threads is calculated and set to an optimal value if
	       this directive is not defined.
	       You should not set this unless you know what you are doing.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_flowcontrol"/>FlowControl</term>
	   <listitem>
	     <simpara>
	       This optional boolean directive specifies whether all input and processor modules
	       should use flow-control.
	       This defaults to TRUE.
	       See the description of the module level
	       <link linkend="config_module_flowcontrol">FlowControl</link> directive
	       for more information.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_nofreeonexit"/>NoFreeOnExit</term>
	   <listitem>
	     <simpara>
	       This directive has only a debugging purpuse. When set to TRUE,
	       nxlog will not free module resources on exit. Otherwise valgrind is unable
	       to show proper stack trace locations in module function calls.
	       The default value is FALSE if not specified.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_ignoreerrors"/>IgnoreErrors</term>
	   <listitem>
	     <simpara>
	       If set to FALSE, nxlog will stop if it encounters a problem with the configuration file
	       such as an invalid module directive or if there are other problems which would prevent
	       all modules functioning correctly.
	       If set to TRUE, nxlog will start after logging the problem.
	       The default value is TRUE if the directive is not specified.
	     </simpara>
	   </listitem>
	 </varlistentry>

	 <varlistentry>
	   <term><anchor id="config_global_panic"/>Panic</term>
	   <listitem>
	     <simpara>
	       A panic condition is a critical state which usually indicates a bug.
	       Assertions are used in nxlog code for checking conditions where the code
	       will not work unless the asserted condition is satisfied.
	       Failing assertions result in a panic and these also suggest a bug in the code.
	       A typical case is checking for NULL pointers before pointer dereference.
	       Assertions have also a security value.
	       This directive can take three different values: HARD, SOFT or OFF.
	       HARD will cause an abort in case the assertion fails. This is how most
	       C based programs work.
	       SOFT will cause an exception to be thrown at the place of the panic/assertion. In case
	       of NULL pointer checks this is identical to a NullPointerException in Java.
	       It is possible that nxlog can recover from exceptions and can continue to
	       process log messages, or at least the other modules can.
	       In case of assertion failure the location and the condition is printed
	       at CRITICAL loglevel in HARD mode and ERROR loglevel in SOFT mode.
	       If Panic is set to OFF, the failing condition is only printed in the logs but
	       the execution will continue on the normal code path. Most of the time
	       this will result in a segmentation fault or other undefined behavior, though
	       there can be a case where turning off a buggy assertion or panic lurking somewhere in
	       the code will solve the problems caused by it in HARD/SOFT mode.
	       The default value for Panic is SOFT.
	     </simpara>
	   </listitem>
	 </varlistentry>
       </variablelist>
     </para>
   </section>

   <section id="config_modules">
     <title>Modules</title>
     <para>nxlog will only load modules which are used and specified in the configuration file.
       The followin is a skeleton config block for an input module:
<programlisting><![CDATA[
<Input instancename>
    Module      im_module
    ...
</Input>]]></programlisting>
      The instance name must be unique, can contain only the characters [a-zA-Z0-9_-].
      The inctance name is referenced from the
      <link linkend="config_routes">route</link> definition as well as the
      <link linkend="config_module_processors">Processors</link> directive.
      Four types of <link linkend="modules">modules</link> exist in nxlog,
      these must be decalred with the Input, Processor, Output and Extension tags.
     </para>
     
     <section id="config_module_common">
       <title>Common module directives</title>
       <para>
	 The following directives are common in all modules.
       </para>

       <section id="config_module_module">
	 <title>Module</title>
	 <para>
	   This directive is mandatory as it specifies which loadable binary should
	   be loaded. The module binary has a .so extension on Unix and a .dll on MS Windows
	   platforms and resides under the <link linkend="config_global_moduledir">ModuleDir</link>
	   location.
	   All module binary names are prefixed with either im_, pm_, om_, xm_. These stand
	   for input module, processor module, output module and extension module.
	 </para>
	 <para>
	   It is possible that multiple instances use the same loadable binary. In this case
	   the binary is only loaded once but instantiated multiple times.
	   Different module instances may have different configuration.
	 </para>
       </section>

       <section id="config_module_flowcontrol">
	 <title>FlowControl</title>
	 <para>
	   This optional boolean directive specifies whether the module should be using flow-control.
	   This can be used only in <replaceable>Input</replaceable> and
	   <replaceable>Processor</replaceable> modules.
	   Flow-control is enabled by default if this directive is not sepcified.
	   This module-level directive can be used to override the global
	   <link linkend="config_global_flowcontrol">FlowControl</link> directive.
	 </para>
	 <para>
	   When flow-control is in effect, a module (input or processor) which tries to forward
	   log data to the next module in the route will be suspended if the next module cannot
	   accept more data.
	   For example if a network module (e.g. om_tcp) cannot forward logs because of a network
	   error, the proceeding module in the route will be paused.
	   When flow-control is disabled, the module will drop the log record if the queue
	   of the next module in the route is full.
	 </para>
	 <para>
	   Disabling flow-control can be also useful when more output modules are configured to store
	   or forward log data. When flow-control is enabled, the output modules will only store/forward
	   log data if all outputs are functional.
	   Consider the case when log data is stored in a file using om_file and also forwarded
	   over the network using om_tcp.
	   When flow-control is enabled, a network disconnection will make the data flow stall
	   and log data will not be written into the local file either. With flow-control disabled,
	   nxlog will write log data to the file and will drop messages that the om_tcp network
	   module cannot forward.
	 </para>

	 <note>
	   <para>
	     It is recommended to disable FlowControl when the <link linkend="im_uds">im_uds</link>
	     module is used to collect local syslog from the <filename>/dev/log</filename> unix
	     domain socket. Otherwise the syslog() system call will block in all programs which
	     are trying to write to the system log if the Output queue becomes full and this will
	     result in an unresponsive system.
	   </para>
	 </note>

       </section>

       <section id="config_module_schedule">
	 <title>Schedule</title>
	 <para>
	   The Schedule block can be used to execute periodic jobs such as log rotation or
	   any other task. Scheduled jobs have the same priority as the module.
	   The schedule block has the following directives:
	   <variablelist>
	     <varlistentry>
	       <term><anchor id="config_module_schedule_when"/>When</term>
	       <listitem>
		 <para>
		   This directive takes a value similar to a crontab entry which consists of
		   five space separated definitions for minute, hour, day, month and weekday.
		   See the crontab(5) manual for the field definitions. It supports lists as
		   comma separated values and/or ranges. Step values are also supported with
		   the slash. Month and week days are not supported, these must be defined
		   with numeric values.
		   The following extensions are also supported:
<programlisting><![CDATA[
              @yearly        Run once a year, "0 0 1 1 *".
              @annually      (same as @yearly)
              @monthly       Run once a month, "0 0 1 * *".
              @weekly        Run once a week, "0 0 * * 0".
              @daily         Run once a day, "0 0 * * *".
              @midnight      (same as @daily)
              @hourly        Run once an hour, "0 * * * *".
]]></programlisting>
		 </para>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_module_schedule_every"/>Every</term>
	       <listitem>
		 <simpara>
		   In addition to the crontab format it is possible to schedule execution
		   at periodic intervals. With the crontab format it is not possible to
		   run jobs every five days for example, this directive enables it in a simple way.
		   It takes an integer value with an optional unit.
		   The unit can be one of the following: sec, min, hour, day, week.
		   If the unit is not specified, the value is assumed to be in seconds.
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_module_schedule_first"/>First</term>
	       <listitem>
		 <simpara>
		   This directive sets the first execution time. If the value is in the past, 
		   the next execution time is calculated as if nxlog has been running since
		   and jobs will not be run to make up the missed events in the past.
		   The directive takes a <link linkend="lang_literal_datetime">datetime</link>
		   literal value.
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_module_schedule_exec"/>Exec</term>
	       <listitem>
		 <simpara>
		   The Exec directive takes one or more nxlog 
		   <link linkend="lang_statements">statement</link>. This is the code which is
		   actually being scheduled. Multiple Exec directives can be specified within
		   one Schedule block, so this behaves the same as the
		   <link linkend="config_module_exec">Exec</link> directive of the modules. See
		   that for more details.
		   Note that it is not possible to use <link linkend="lang_fields">fields</link>
		   in statements here because execution is not triggered by log messages.
		 </simpara>
	       </listitem>
	     </varlistentry>
	   </variablelist>
	   <example>
	     <title>Two scheduled jobs in the context of the im_tcp module</title>
	     <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../config-examples/config-example-schedule.xml" />
	   </example>
	 </para>
       </section>

       <section id="config_module_exec">
	 <title>Exec</title>
	 <para>
	   The Exec directive contains <link linkend="lang_statements">statements</link> in the
	   <link linkend="lang">nxlog language</link> which are
	   executed when a module receives a log message. This directive is available in all
	   <link linkend="modules_input">input</link>,
	   <link linkend="modules_processor">processor</link> and
	   <link linkend="modules_output">output</link> modules. It is not available in 
	   <link linkend="modules_extension">extension</link> modules because these don't handle
	   log messages directly. More than one Exec may be specified. In this case these
	   are executed in the order of appearance.
	   Due to the limitations of the apache configuration file format, each directive
	   must be one line unless it contains a trailing backslash "\" character.
	   <example>
	     <title>Exec statement spanning multiple lines</title>
	     <programlisting>
Exec	if $Message =~ /something interesting/       \
           log_info("found something interesting");         \
        else                                                \
           log_debug("found nothing interesting");
</programlisting>	   
	   </example>

	   <example>
	     <title>Equivalent use of statements in Exec</title>
	     <programlisting>
Exec	log_info("first"); \
        log_info("second");
# The above is the same as the following:
Exec	log_info("first");
Exec    log_info("second");
</programlisting>	   
	   </example>
	 </para>
	 <note>
	   <para>
	     You cannot split the lines in the first example as the exec directive must
	     contain a full statement. It is only possible to split the Exec arguments if it
	     contains multiple statements as in the second example above.
	   </para>
	 </note>
       </section>

       <section id="config_module_processors">
	 <title>Processors</title>
	 <para>
	   The 'Processors' directive has been obsoleted and is no longer available.
	 </para>
       </section>

       <section id="config_inputtype">
	 <title>InputType</title>
	 <para>
	   This directive specifies the name of the registered input reader function to be used
	   for parsing raw events from input data. Names are treated case insensitively.
	 </para>
	 <para>
	   This is a common directive only for stream oriented input modules:
	   <link linkend="im_file">im_file</link>,
	   <link linkend="im_exec">im_exec</link>,
	   <link linkend="im_ssl">im_ssl</link>,
	   <link linkend="im_tcp">im_tcp</link>,
	   <link linkend="im_udp">im_udp</link>,
	   <link linkend="im_uds">im_uds</link>.
	   Note that im_udp may only work properly if log messages do not span multiple packets
	   and log messages are within the UDP message size limit.
	   Otherwise the loss of a packet may lead to parse errors.
	 </para>
	 <para>
	   These modules work by filling an input buffer with data read from the source. If the read
	   operation was successfull (i.e. there was data coming from the source), the module calls
	   the specified callback function. If this is not explicitly specified, it will use
	   the module default.
	 </para>
	 <para>
	   Modules may provide custom input reader functions. Once these are registered into
	   the nxlog core, the modules listed above will be capable of using these. This
	   makes it easier to implement custom protocols because these can be developed without
	   the need of taking care about the transport layer.
	 </para>
	 <para>
	   The following input reader functions are provided by the nxlog core:
	   <variablelist>
	     <varlistentry>
	       <term><anchor id="config_inputtype_linebased"/>LineBased</term>
	       <listitem>
		 <simpara>
		   The input is assumed to contain log messages separated by newlines.
		   Thus if an LF (\n) or CRLF (\r\n) is found, the function considers that it has
		   reached the end of the log message.
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_inputtype_dgram"/>Dgram</term>
	       <listitem>
		 <simpara>
		   Once the buffer is filled with data, it is considered to be one log message.
		   This is the default for the 
		   <link linkend="im_udp">im_udp</link> input module, since UDP syslog messages
		   arrive in separate packets.
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_inputtype_binary"/>Binary</term>
	       <listitem>
		 <simpara>
		   The input is parsed in the nxlog binary format which is capable of preserving
		   parsed fields of the log messages.
		   The <link linkend="config_inputtype_linebased">LineBased</link> reader is
		   capable of automatically detecting log messages in the Binary nxlog format,
		   it is only recommended to configure InputType to Binary if no compatibility with
		   other logging software is required.
		 </simpara>
	       </listitem>
	     </varlistentry>
	   </variablelist>
	   <example>
	     <title>TCP input assuming nxlog format</title>
	     <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../config-examples/config-example-inputtype.xml" />
	   </example>
	 </para>

       </section>

       <section id="config_outputtype">
	 <title>OutputType</title>
	 <para>
	   This directive specifies the name of the registered output writer function to be used
	   for formatting raw events when sending to different destinations.
	   Names are treated case insensitively.
	 </para>
	 <para>
	   This is a common directive only for stream oriented output modules:
	   <link linkend="om_file">om_file</link>,
	   <link linkend="om_exec">om_exec</link>,
	   <link linkend="om_ssl">om_ssl</link>,
	   <link linkend="om_tcp">om_tcp</link>,
	   <link linkend="om_udp">om_udp</link>,
	   <link linkend="om_uds">om_uds</link>.
	 </para>
	 <para>
	   These modules work by filling the output buffer with data to be written to the
	   destination. The specified callback function is called before the write operation.
	   If this is not explicitly specified, it will use the module default.
	 </para>
	 <para>
	   Modules may provide custom output formatter functions. Once these are registered into
	   the nxlog core, the modules listed above will be capable of using these. This
	   makes it easier to implement custom protocols because these can be developed without
	   the need to take care about the transport layer.
	 </para>
	 <para>
	   The following output writer functions are provided by the nxlog core:
	   <variablelist>
	     <varlistentry>
	       <term><anchor id="config_outputtype_linebased"/>LineBased</term>
	       <listitem>
		 <simpara>
		   The output will contain log messages separated by newlines (CRLF).
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_outputtype_dgram"/>Dgram</term>
	       <listitem>
		 <simpara>
		   Once the buffer is filled with data, it is considered to be one log message.
		   This is the default for the 
		   <link linkend="om_udp">om_udp</link> output module, since UDP syslog messages
		   are sent in separate packets.
		 </simpara>
	       </listitem>
	     </varlistentry>

	     <varlistentry>
	       <term><anchor id="config_outputtype_binary"/>Binary</term>
	       <listitem>
		 <simpara>
		   The output is written in the nxlog binary format which is capable of preserving
		   parsed fields of the log messages.
		 </simpara>
	       </listitem>
	     </varlistentry>
	   </variablelist>
	   <example>
	     <title>TCP output sending messages in nxlog format</title>
	     <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../config-examples/config-example-outputtype.xml" />
	   </example>
	 </para>
       </section>

     </section>

   </section>
   
   <section id="config_routes">
     <title>Routes</title>
     <para>
       Routes define the flow and processing order of the log messages. The route must have a
       name and a Path. The name is specified similarly to the instance name in a module block.
	 <example>
	   <title>Route block</title>
	   <programlisting><![CDATA[
<Route example>
    Path	in1, in2 => proc => out1, out2
</Route>]]>	   </programlisting>
	 </example>
     </para>

     <section id="config_route_priority">
       <title>Priority</title>
       <para>
	 This directive is optional. It takes an integer value as a parameter, its value must
	 be in the range of 1-100. It defaults to 10 if it is not explicitly specified.
	 Log messages in routes with a lower priority value will be processed before others.
       </para>
       <para>
	 Actually this value is assigned to each module part of the route. The internal
	 events of the modules are processed in priority order by the nxlog engine,
	 thus modules of a route with a lower priority value (higher priority) will
	 process log messages first.
       </para>
       <para>
	 This directive can be especially usefull to minimize syslog UDP message loss for
	 example.
	 <example>
	   <title>Prioritized processing</title>
	   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../config-examples/config-example-route_priority.xml" />
	 </example>
       </para>
     </section>

     <section id="config_route_path">
       <title>Path</title>
       <para>
	 The Path directive is where the data flow is defined.
	 First the instance name of input modules are specified. If more than one input reads
	 log messages which fed data into the route, then these must be separated by a comma.
	 Input modules are followed by an arrow "=>" sign. Either processor modules or
	 output modules follow. Processor modules must be separated by arrows, not commas,
	 because they receive log messages in order, unlike input and output modules which
	 work in parallel. Output modules are separated by commas.
	 The syntax for the PATH directive is illustrated by the following:
	 <programlisting><![CDATA[
Path	INPUT1[, INPUT2...] => [PROCESSOR1 [=> PROCESSOR2...] =>] OUTPUT1[, OUTPUT2...]
]]></programlisting>
	 The Path must contain at least an input and an output module. The following example
	 shows different routes.
	 <example id="config_example_routes">
	   <title>Different routes</title>
	   <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../config-examples/config-example-routes.xml" />
	 </example>

       </para>
     </section>

   </section>

</chapter>
