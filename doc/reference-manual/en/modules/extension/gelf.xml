<?xml version="1.0" encoding="UTF-8"?>
<section id="xm_gelf">
  <title>GELF (xm_gelf)</title>
  <para>
    This module provides an output writer function which can be used to generate output 
    in Graylog Extended Log Format (GELF) and feed that into 
    <ulink url="http://graylog2.org">Graylog2</ulink> or GELF compliant tools.
  </para>
  <para>
    The advantage of using this module over syslog (e.g. Snare Agent and others) is that the GELF
    format contains structured data in JSON and makes the fields available to analysis. This
    is especially convenient with sources such as the Windows EventLog which already generate
    logs in a structured format.
  </para>
  <para>
    The <ulink url="https://github.com/Graylog2/graylog2-docs/wiki/GELF">GELF</ulink>
    output generated by this module includes all fields, except the following:
    <simplelist>
      <member>
	The 'raw_event' field.
      </member>
      <member>
	Fields starting with a leading dot (.).
      </member>
      <member>
	Fields starting with a leading underscore (_).
      </member>
    </simplelist>
    In order to make nxlog output GELF formatted data, the following needs to be done:

    <orderedlist numeration="arabic">
      <listitem>
	<para>
	  Make sure the xm_gelf module is loaded:
	  <programlisting><![CDATA[
<Extension gelf>
    Module       xm_gelf
</Extension>
]]></programlisting>
	</para>
      </listitem>
      <listitem>
	<para>
          Set the <link linkend="config_outputtype">OutputType</link> to GELF in your output module
	  (which is <link linkend="om_udp">om_udp</link>):
	  <programlisting><![CDATA[
     OutputType  GELF
]]></programlisting>
	</para>
      </listitem>
    </orderedlist>
  </para>

  <section id="xm_gelf_config">
    <title>Configuration</title>
    <para>
      The module does not have any module specific configuration directives.
    </para>
  </section>

  <section id="xm_gelf_config_examples">
    <title>Configuration examples</title>
    <para>
      <example id="xm_gelf_example1">
	<title>Sending Windows EventLog to Graylog2 in GELF</title>
	<para>
	  The following configuration reads the Windows EventLog and sends it to the
	  Graylog2 server in GELF format.
	</para>
	  <programlisting><![CDATA[
<Extension gelf>
    Module      xm_gelf
</Extension>

<Input in>
    # Use 'im_mseventlog' for Windows XP, 2000 and 2003
    Module      im_msvistalog
# Uncomment the following to collect specific event logs only
#    Query       <QueryList>\
#                    <Query Id="0">\
#                        <Select Path="Application">*</Select>\
#                        <Select Path="System">*</Select>\
#                        <Select Path="Security">*</Select>\
#                    </Query>\
#                </QueryList>
</Input>

<Output out>
    Module      om_udp
    Host        192.168.1.1
    Port        12201
    OutputType  GELF
</Output>

<Route r>
    Path        in => out
</Route>
]]>
</programlisting>
      </example> 
      <example id="xm_gelf_example_file">
	<title>Forwarding custom log files to Graylog2 in GELF</title>
	<para>
	  You may want to collect custom application logs and send it out in the GELF format. See the following example about
	  setting the common and custom fields to make the data more useful for the other end.
	</para>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../config-examples/config-example-xm_gelf_file.xml" />
      </example>

      <example id="xm_gelf_example_csv">
	<title>Parsing a CSV file and sending it to Graylog2 in GELF</title>
	<para>
	  Using the following config file nxlog will read a CSV file containing 3 fields and
	  forwards it in GELF so that the fields will be available on the server.
	</para>
	<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../../config-examples/config-example-xm_gelf_csv.xml" />
      </example>

    </para>
  </section>

</section>
