<?xml version="1.0" encoding="UTF-8"?>
<section id="core_funcproc"><title>Functions and procedures exported by core</title>

<section id="core_functions"><title>Functions exported by core</title>
  <variablelist>
   <varlistentry>
     <term>
       <anchor id="core_func_lc"/>
       <function>string lc(string arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert a string to lower case.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_uc"/>
       <function>string uc(string arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert a string to upper case.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_now"/>
       <function>datetime now();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the current time.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_datetime">datetime</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_type"/>
       <function>string type(unknown arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Returns the type of a variable. Can be "boolean", "integer", "string", "datetime",
       "ip4addr", "ip6addr", "regexp", "binary". For values with the unknown type, it 
       returns undef.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_microsecond"/>
       <function>integer microsecond(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the microsecond part from the time value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_second"/>
       <function>integer second(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the second part from the time value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_minute"/>
       <function>integer minute(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the minute part from the time value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_hour"/>
       <function>integer hour(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the hour part from the time value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_day"/>
       <function>integer day(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the day part from the time value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_month"/>
       <function>integer month(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the month part from the datetime value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_year"/>
       <function>integer year(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the year part from the datetime value.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_fix_year"/>
       <function>datetime fix_year(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>
       Set year value to current in a datetime which was parsed with a
       missing year such as BSD syslog or cisco timestamps.
     </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_datetime">datetime</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_dayofweek"/>
       <function>integer dayofweek(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>The number of days since Sunday in the range of 0-6.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_dayofyear"/>
       <function>integer dayofyear(datetime datetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the day number of the year in the range of 1-366.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_string"/>
       <function>string string(unknown arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert the argument to string.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_integer"/>
       <function>integer integer(unknown arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Parse and convert the string argument to an integer. For datetime type it returns the number of microseconds since epoh </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_datetime"/>
       <function>datetime datetime(integer arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert the integer argument expressing the number of microseconds since epoch to datetime.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_datetime">datetime</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_parsedate"/>
       <function>datetime parsedate(string arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Parse a datetime argument. Returns an undefined datetime type if it cannot parse the argument so that the user can fix the error, e.g. $EventTime = parsedate($somestring); if not defined($EventTime) $EventTime = now();</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_datetime">datetime</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_strftime"/>
       <function>string strftime(datetime datetime, string fmt);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert a datetime to a string with the given format. See the manual of strftime(3) for the format specification.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>datetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>fmt</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_strptime"/>
       <function>datetime strptime(string input, string fmt);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert a string to a datetime with the given format. See the manual of strptime(3) for the format specification.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>input</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>fmt</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_datetime">datetime</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_hostname"/>
       <function>string hostname();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the hostname (short form).</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_hostname_fqdn"/>
       <function>string hostname_fqdn();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the FQDN hostname. This function will return the short form if the FQDN hostname cannot be determined.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_host_ip"/>
       <function>ip4addr host_ip();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the first non-loopback IP address the hostname resolves to.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_ip4addr">ip4addr</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>ip4addr host_ip(integer nth);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the nth non-loopback IP address the hostname resolves to. The nth argument starts from 1.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>nth</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_ip4addr">ip4addr</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_get_var"/>
       <function>unknown get_var(string varname);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the value of the variable or undef if it doesn't exist.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_unknown">unknown</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_get_stat"/>
       <function>integer get_stat(string statname);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the value of the statistical counter or undef if it doesn't exist.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>integer get_stat(string statname, datetime time);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the value of the statistical counter or undef if it doesn't exist. The time argument specifies the current time.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>time</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_ip4addr"/>
       <function>ip4addr ip4addr(integer arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert the integer argument to an ip4addr type.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_ip4addr">ip4addr</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>ip4addr ip4addr(integer arg, boolean ntoa);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Convert the integer argument to an ip4addr type. If 'ntoa' is set to true, the integer is assumed to be in network byte order. Instead of '1.2.3.4' the result will be '4.3.2.1'.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>ntoa</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_boolean">boolean</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_ip4addr">ip4addr</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_substr"/>
       <function>string substr(string src, integer from);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the string starting at the byte offset specified in 'from'.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>src</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>from</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>string substr(string src, integer from, integer to);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return a substring specified with the starting and ending positions as byte offsets from the beginning of the string.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>src</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>from</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>to</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_replace"/>
       <function>string replace(string subject, string src, string dst);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Replace all occurences of 'src' with 'dst' in the 'subject' string.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>subject</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>src</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>dst</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>string replace(string subject, string src, string dst, integer count);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Replace 'count' number occurences of 'src' with 'dst' in the 'subject' string.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>subject</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>src</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>dst</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>count</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_string">string</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_size"/>
       <function>integer size(string str);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return the size of the string 'str' in bytes.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>str</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_integer">integer</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_func_dropped"/>
       <function>boolean dropped();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Return TRUE if the currently processed event has been already dropped.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term>return type</term>
         <listitem>
           <simpara>
            <link linkend="lang_type_boolean">boolean</link>
           </simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

  </variablelist>
</section>

<section id="core_procedures"><title>Procedures exported by core</title>
  <variablelist>
   <varlistentry>
     <term>
       <anchor id="core_proc_log_debug"/>
       <function>log_debug(unknown arg, varargs args);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Print the argument(s) at DEBUG log level.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>args</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_varargs">varargs</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_debug"/>
       <function>debug(unknown arg, varargs args);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Print the argument(s) at DEBUG log level. Same as log_debug().</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>args</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_varargs">varargs</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_log_info"/>
       <function>log_info(unknown arg, varargs args);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Print the argument(s) at INFO log level.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>args</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_varargs">varargs</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_log_warning"/>
       <function>log_warning(unknown arg, varargs args);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Print the argument(s) at WARNING log level.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>args</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_varargs">varargs</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_log_error"/>
       <function>log_error(unknown arg, varargs args);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Print the argument(s) at ERROR log level.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>args</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_varargs">varargs</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_delete"/>
       <function>delete(unknown arg);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Delete the field from the event, i.e. delete($field).
Note that doing '$field = undef' is not the same, though after both operations
the field will be undefined.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>arg</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_create_var"/>
       <function>create_var(string varname);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module variable with the specified name. The variable will be created with an infinite lifetime.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_var(string varname, integer lifetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module variable with the specified name with the lifetime given in seconds.
If the lifetime expires, the variable is deleted automatically and get_var(name) will return undef.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>lifetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_var(string varname, datetime expiry);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module variable with the specified name. Expiry specifies when the variable should be deleted automatically.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>expiry</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_delete_var"/>
       <function>delete_var(string varname);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Delete the module variable with the specified name if it exists.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_set_var"/>
       <function>set_var(string varname, unknown value);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Set a value of a module variable. If the variable does not exist, it will be created with an infinite lifetime.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>varname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>value</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_unknown">unknown</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_create_stat"/>
       <function>create_stat(string statname, string type);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>
       Create a module statistical counter with the specified name using the current time.
       The statistical counter will be created with an infinite lifetime.
       The type argument can be any of the following to select the required algorithm
       for calculating the value of the statistical counter: COUNT, COUNTMIN, COUNTMAX
       AVG, AVGMIN, AVGMAX, RATE, RATEMIN, RATEMAX, GRAD, GRADMIN, GRADMAX.
       See the statistical counters section for the description of these.
       This procedure with two parameters can only be used with COUNT, otherwise the 
       interval parameter must be specified.
     </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>type</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_stat(string statname, string type, integer interval);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module statistical counter with the specified name to be calculated over 'interval' seconds and using the current time. The statistical counter will be created with an infinite lifetime.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>type</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>interval</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_stat(string statname, string type, integer interval, datetime time);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module statistical counter with the specified name to be calculated over 'interval' seconds and the time value specified in the argument named 'time'.  The statistical counter will be created with an infinite lifetime.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>type</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>interval</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>time</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_stat(string statname, string type, integer interval, datetime time, integer lifetime);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module statistical counter with the specified name to be calculated over 'interval' seconds and the time value specified in the argument named 'time'.  The statistical counter will expire after 'lifetime' seconds.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>type</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>interval</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>time</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>lifetime</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>create_stat(string statname, string type, integer interval, datetime time, datetime expiry);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Create a module statistical counter with the specified name to be calculated over 'interval' seconds and the time value specified in the argument named 'time'.  The statistical counter will expire at 'expiry'.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>type</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>interval</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>time</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>expiry</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_add_stat"/>
       <function>add_stat(string statname, integer value);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Add 'value' to the statistical counter using the current time.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>value</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <function>add_stat(string statname, integer value, datetime time);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Add 'value' to the statistical counter using the time specified in the argument named 'time'.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>statname</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>value</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>time</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_datetime">datetime</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_sleep"/>
       <function>sleep(integer interval);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>
       Sleep the specified number of microseconds. This procedure is provided for testing
       purposes mostly. It can be used as a poor man's rate limiting tool, though its use
       is not recommended.
     </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>interval</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_integer">integer</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_drop"/>
       <function>drop();</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Drop the currently processed event's log and don't execute further statements.</simpara>
         </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_rename_field"/>
       <function>rename_field(string old, string new);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>Rename a field.</simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>old</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
            <varlistentry>
             <term>new</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_reroute"/>
       <function>reroute(string routename);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>
       Move the currently processed event data to the route specified in the argument.
       The event data will enter the route as if it was received by an input module there.
     </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>routename</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

   <varlistentry>
     <term>
       <anchor id="core_proc_add_to_route"/>
       <function>add_to_route(string routename);</function>
     </term>
     <listitem>
      <variablelist>
        <varlistentry>
         <term>description</term>
         <listitem>
          <simpara>
       Copy the currently processed event data to the the route specified in the argument.
       This procedure makes a copy of the data and the original will be processed normally.
     </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
          <term>arguments</term>
          <listitem>
           <variablelist>
            <varlistentry>
             <term>routename</term>
             <listitem>
               <simpara>
                type: <link linkend="lang_type_string">string</link>
               </simpara>
             </listitem>
            </varlistentry>
           </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
     </listitem>
   </varlistentry>

  </variablelist>
</section>
</section>
